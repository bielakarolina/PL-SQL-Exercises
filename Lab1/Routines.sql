create PROCEDURE CZY_WYCIECZKA_ISTNIEJE (IDWYCIECZKI IN NUMBER) AS
  L_WYCIECZEK NUMBER;
  D_WYCIECZKI DATE;
  BEGIN
    SELECT COUNT(ID_WYCIECZKI) INTO L_WYCIECZEK FROM WYCIECZKI WHERE ID_WYCIECZKI=IDWYCIECZKI;
    IF L_WYCIECZEK = 0 THEN
      raise_application_error (-20001,'WYCIECZKA O PODANYM ID NIE ISTNIEJE');
    END IF ;

    SELECT DATA INTO D_WYCIECZKI FROM WYCIECZKI WHERE IDWYCIECZKI=ID_WYCIECZKI;
    IF d_WYCIECZKI < SYSDATE THEN
      raise_application_error (-20001,'WYCIECZKA O PODANYM ID JU¯ SIÊ ODBY£A');
    END IF ;
  END;
/

create PROCEDURE CZY_OSOBA_ISTNIEJE(IDOSOBY NUMBER) AS
  L_OSOBY NUMBER;
  BEGIN
    SELECT COUNT(ID_OSOBY) INTO L_OSOBY FROM OSOBY WHERE ID_OSOBY=IDOSOBY;
    IF L_OSOBY = 0 THEN
    raise_application_error (-20001,'OSOBA O PODANYM ID NIE ISTNIEJE');
     END IF;
  END;
/

create PROCEDURE LICZBA_WOLNYCH_MIEJSC (IDWYCIECZKI NUMBER ) AS
L_WYCIECZEK NUMBER;
BEGIN
SELECT COUNT(ID_WYCIECZKI) INTO L_WYCIECZEK FROM DOSTEPNE_WYCIECZKI WHERE ID_WYCIECZKI=IDWYCIECZKI;
IF L_WYCIECZEK = 0 THEN
raise_application_error (-20001,'PODANA WYCIECZKA JEST NIEDOSTÊPNA');
END IF;
END;
/

create FUNCTION UCZESTNICY_WYCIECZKI (IDWYCIECZKI NUMBER)
RETURN REZERWACJE_TABELA IS
 licznik PLS_INTEGER :=1;
  pr REZERWACJE_TABELA := REZERWACJE_TABELA();
  CURSOR CUR_UCZESTNICY_WYCIECZKI IS
    SELECT w.ID_WYCIECZKI,
           w.NAZWA,
           w.KRAJ,
           w.DATA,
           w.IMIE,
           w.NAZWISKO,
           w.STATUS
    FROM wycieczki_osoby w
    WHERE w.ID_WYCIECZKI = IDWYCIECZKI AND W.STATUS!='A';

  BEGIN
    BEGIN
     CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
    END;
  FOR i IN CUR_UCZESTNICY_WYCIECZKI LOOP
      pr.EXTEND;
      pr(licznik) :=
        POJEDYNCZA_REZERWACJA(i.IMIE,i.NAZWISKO,i.STATUS,i.ID_WYCIECZKI,i.NAZWA,i.KRAJ,i.DATA);
      licznik := licznik+1;
    END LOOP;
    RETURN pr;
  END;
/

create FUNCTION REZERWACJE_OSOBY (IDOSOBY NUMBER)
RETURN REZERWACJE_TABELA IS
 licznik PLS_INTEGER :=1;
  pr REZERWACJE_TABELA := REZERWACJE_TABELA();
  CURSOR CUR_REZERWACJE_OSOBY IS
    SELECT  w.ID_WYCIECZKI,
             w.NAZWA,
             w.KRAJ,
             w.DATA,
             o.IMIE,
             o.NAZWISKO,
             r.STATUS
 FROM WYCIECZKI w
 JOIN REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
 JOIN OSOBY o ON r.ID_OSOBY = o.ID_OSOBY
  WHERE O.ID_OSOBY=IDOSOBY;

  BEGIN
    BEGIN
     CZY_OSOBA_ISTNIEJE(IDOSOBY);
    END;
  FOR i IN CUR_REZERWACJE_OSOBY LOOP
      pr.EXTEND;
      pr(licznik) :=
        POJEDYNCZA_REZERWACJA(i.IMIE,i.NAZWISKO,i.STATUS,i.ID_WYCIECZKI,i.NAZWA,i.KRAJ,i.DATA);
      licznik := licznik+1;
    END LOOP;
    RETURN pr;
  END;
/

create FUNCTION PRZYSZLE_REZERWACJE_OSOBY (IDOSOBY NUMBER)
RETURN REZERWACJE_TABELA IS
 licznik PLS_INTEGER :=1;
  pr REZERWACJE_TABELA := REZERWACJE_TABELA();
  CURSOR CUR_PRZYSZLE_REZERWACJE_OSOBY IS
    SELECT  w.ID_WYCIECZKI,
             w.NAZWA,
             w.KRAJ,
             w.DATA,
             o.IMIE,
             o.NAZWISKO,
             r.STATUS
 FROM WYCIECZKI w
 JOIN REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
 JOIN OSOBY o ON r.ID_OSOBY = o.ID_OSOBY
  WHERE O.ID_OSOBY=IDOSOBY AND SYSDATE<W.DATA AND R.STATUS!='A';

  BEGIN
    BEGIN
     CZY_OSOBA_ISTNIEJE(IDOSOBY);
    END;
  FOR i IN CUR_PRZYSZLE_REZERWACJE_OSOBY LOOP
      pr.EXTEND;
      pr(licznik) :=
        POJEDYNCZA_REZERWACJA(i.IMIE,i.NAZWISKO,i.STATUS,i.ID_WYCIECZKI,i.NAZWA,i.KRAJ,i.DATA);
      licznik := licznik+1;
    END LOOP;
    RETURN pr;
  END;
/

create FUNCTION DOSTEPNE_WYCIECZKI_FUNKCJA (Z_KRAJ VARCHAR2,OD_DATA DATE, DO_DATA DATE)
RETURN WYCIECZKI_TABELA IS
 licznik PLS_INTEGER :=1;
  pw WYCIECZKI_TABELA:= WYCIECZKI_TABELA();
  CURSOR CUR_DOSTEPNE_WYCIECZKI_FUNKCJA IS

  select KRAJ, DATA, NAZWA, LICZBA_MIEJSC, ID_WYCIECZKI
  FROM WYCIECZKI_MIEJSCA
  WHERE LICZBA_MIEJSC_WOLNYCH>0 AND DATA<=DO_DATA AND DATA>=OD_DATA AND KRAJ=Z_KRAJ;

  BEGIN
  FOR i IN CUR_DOSTEPNE_WYCIECZKI_FUNKCJA LOOP
      pw.EXTEND;
      pw(licznik) :=
        POJEDYNCZA_WYCIECZKA(i.KRAJ,i.DATA,i.NAZWA,i.LICZBA_MIEJSC,i.ID_WYCIECZKI);
      licznik := licznik+1;
    END LOOP;
    RETURN pw;
  END;
/

create PROCEDURE DODAJ_REZERWACJE (IDWYCIECZKI NUMBER, IDOSOBY NUMBER) AS
    data_wycieczki DATE;
    id_nowej_rezerwacji NUMBER;
BEGIN
  BEGIN
    CZY_OSOBA_ISTNIEJE(IDOSOBY);
    CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
    LICZBA_WOLNYCH_MIEJSC(IDWYCIECZKI);
  END;

  SELECT DATA INTO data_wycieczki FROM WYCIECZKI
      WHERE IDWYCIECZKI=ID_WYCIECZKI;
  IF data_wycieczki < SYSDATE THEN
    raise_application_error (-20001,'WYCIECZKA NIE JEST DOSTÊPNA');
  end if;
  INSERT INTO REZERWACJE(ID_WYCIECZKI,ID_OSOBY,STATUS) VALUES (IDWYCIECZKI,IDOSOBY,'N')
  RETURNING NR_REZERWACJI INTO id_nowej_rezerwacji;

  INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (id_nowej_rezerwacji,data_wycieczki,'N');
    COMMIT ;
END;
/

create PROCEDURE CZY_REZERWACJA_ISTNIEJE(NRREZERWACJI NUMBER) AS
  L_REZERWACJI NUMBER;
  BEGIN
    SELECT COUNT(NR_REZERWACJI) INTO L_REZERWACJI FROM REZERWACJE WHERE NRREZERWACJI=NR_REZERWACJI;
    IF L_REZERWACJI = 0 THEN
    raise_application_error (-20001,'REZERWACJA O PODANYM NR NIE ISTNIEJE');
     END IF;
  END;
/

create PROCEDURE ZMIEN_STATUS_REZERWACJI (NRREZERWACJI NUMBER, NOWY_STATUS CHAR) AS
    stary_status CHAR;

BEGIN
  BEGIN
    CZY_REZERWACJA_ISTNIEJE(NRREZERWACJI);
  END;
    SELECT STATUS INTO stary_status FROM REZERWACJE WHERE NRREZERWACJI=NR_REZERWACJI;
    IF stary_status ='A' THEN
     raise_application_error (-20001,'REZERWACJA ZOSTALA ANULOWANA');
    ELSIF stary_status=NOWY_STATUS THEN
      raise_application_error (-20001,'STATUS REZERWACJI JEST TAKI SAM');
    ELSIF stary_status='Z' AND (NOWY_STATUS='N' OR NOWY_STATUS='P') THEN
      raise_application_error (-20001,'REZERWACJA JEST ZAP£ACONA I POTWIERDZONA, NIE MO¯NA WPROWADZIC TAKIEJ ZMIANY');
    END IF;

  UPDATE REZERWACJE SET STATUS = NOWY_STATUS WHERE NR_REZERWACJI = NRREZERWACJI;
  INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (NRREZERWACJI,SYSDATE,NOWY_STATUS);

END;
/

create PROCEDURE ZMIEN_LICZBE_MIEJSC (IDWYCIECZKI NUMBER, NOWA_LICZBA_MIEJSC NUMBER) AS
    liczba_zarezerwowanych_miejsc number;
BEGIN
  BEGIN
    CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
  END;
    SELECT liczba_zajetych_miejsc INTO liczba_zarezerwowanych_miejsc FROM MIEJSCA_ZAJÊTE WHERE ID_WYCIECZKI=IDWYCIECZKI;
    IF liczba_zarezerwowanych_miejsc > NOWA_LICZBA_MIEJSC THEN
     raise_application_error (-20001,'NIE MO¯NA ZMIEJSZYC LICZBY MIEJSC Z POWODU ILOSCI REZERWACJI');
    END IF;

  UPDATE WYCIECZKI SET LICZBA_MIEJSC = NOWA_LICZBA_MIEJSC WHERE IDWYCIECZKI = ID_WYCIECZKI;

END;
/

create PROCEDURE przelicz AS
  BEGIN
    UPDATE WYCIECZKI W
    SET LICZBA_WOLNYCH_MIEJSC =  W.LICZBA_MIEJSC-(select count(*) 
                                  FROM REZERWACJE R
                                  WHERE R.STATUS !='A' and W.ID_WYCIECZKI = R.ID_WYCIECZKI);
  END;
/

create PROCEDURE LICZBA_WOLNYCH_MIEJSC_2 (IDWYCIECZKI NUMBER ) AS
L_WYCIECZEK NUMBER;
BEGIN
SELECT COUNT(ID_WYCIECZKI) INTO L_WYCIECZEK FROM DOSTEPNE_WYCIECZKI_2 WHERE ID_WYCIECZKI=IDWYCIECZKI;
IF L_WYCIECZEK = 0 THEN
raise_application_error (-20001,'PODANA WYCIECZKA JEST NIEDOSTÊPNA');
END IF;
END;
/

create PROCEDURE DODAJ_REZERWACJE_2 (IDWYCIECZKI NUMBER, IDOSOBY NUMBER) AS
    data_wycieczki DATE;
    id_nowej_rezerwacji NUMBER;
BEGIN
  BEGIN
    CZY_OSOBA_ISTNIEJE(IDOSOBY);
    CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
    LICZBA_WOLNYCH_MIEJSC_2(IDWYCIECZKI); --modyfikacja
  END;

  SELECT DATA INTO data_wycieczki FROM WYCIECZKI
      WHERE IDWYCIECZKI=ID_WYCIECZKI;
  IF data_wycieczki < SYSDATE THEN
    raise_application_error (-20001,'WYCIECZKA NIE JEST DOSTÊPNA');
  end if;
  INSERT INTO REZERWACJE(ID_WYCIECZKI,ID_OSOBY,STATUS) VALUES (IDWYCIECZKI,IDOSOBY,'N')
  RETURNING NR_REZERWACJI INTO id_nowej_rezerwacji;

  INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (id_nowej_rezerwacji,data_wycieczki,'N');
  PRZELICZ(); --modyfikacja

END;
/

create FUNCTION DOSTEPNE_WYCIECZKI_FUNKCJA_2 (Z_KRAJ VARCHAR2,OD_DATA DATE, DO_DATA DATE)
RETURN WYCIECZKI_TABELA IS
 licznik PLS_INTEGER :=1;
  pw WYCIECZKI_TABELA:= WYCIECZKI_TABELA();
  CURSOR CUR_DOSTEPNE_WYCIECZKI_FUNKCJA_2 IS

  select KRAJ, DATA, NAZWA, LICZBA_MIEJSC, ID_WYCIECZKI
  FROM WYCIECZKI_MIEJSCA2
  WHERE LICZBA_WOLNYCH_MIEJSC>0 AND DATA<=DO_DATA AND DATA>=OD_DATA AND KRAJ=Z_KRAJ;

  BEGIN
  FOR i IN CUR_DOSTEPNE_WYCIECZKI_FUNKCJA_2 LOOP
      pw.EXTEND;
      pw(licznik) :=
        POJEDYNCZA_WYCIECZKA(i.KRAJ,i.DATA,i.NAZWA,i.LICZBA_MIEJSC,i.ID_WYCIECZKI);
      licznik := licznik+1;
    END LOOP;
    RETURN pw;
  END;
/

create PROCEDURE ZMIEN_LICZBE_MIEJSC_2 (IDWYCIECZKI NUMBER, NOWA_LICZBA_MIEJSC NUMBER) AS
    liczba_zarezerwowanych_miejsc number;
BEGIN
  BEGIN
    CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
  END;
    SELECT liczba_zajetych_miejsc INTO liczba_zarezerwowanych_miejsc FROM MIEJSCA_ZAJÊTE WHERE ID_WYCIECZKI=IDWYCIECZKI;
    IF liczba_zarezerwowanych_miejsc > NOWA_LICZBA_MIEJSC THEN
     raise_application_error (-20001,'NIE MO¯NA ZMIEJSZYC LICZBY MIEJSC Z POWODU ILOSCI REZERWACJI');
    END IF;

  UPDATE WYCIECZKI SET LICZBA_MIEJSC = NOWA_LICZBA_MIEJSC WHERE IDWYCIECZKI = ID_WYCIECZKI;
  UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC=NOWA_LICZBA_MIEJSC-liczba_zarezerwowanych_miejsc 
                   WHERE IDWYCIECZKI=ID_WYCIECZKI;

END;
/

create PROCEDURE ZMIEN_STATUS_REZERWACJI_2 (NRREZERWACJI NUMBER, NOWY_STATUS CHAR) AS
    stary_status CHAR;
    idwycieczki NUMBER;

BEGIN
  BEGIN
    CZY_REZERWACJA_ISTNIEJE(NRREZERWACJI);
  END;
    SELECT STATUS INTO stary_status FROM REZERWACJE WHERE NRREZERWACJI=NR_REZERWACJI;
    IF stary_status ='A' THEN
     raise_application_error (-20001,'REZERWACJA ZOSTALA ANULOWANA');
    ELSIF stary_status=NOWY_STATUS THEN
      raise_application_error (-20001,'STATUS REZERWACJI JEST TAKI SAM');
    ELSIF stary_status='Z' AND (NOWY_STATUS='N' OR NOWY_STATUS='P') THEN
      raise_application_error (-20001,'REZERWACJA JEST ZAP£ACONA I POTWIERDZONA, NIE MO¯NA WPROWADZIC TAKIEJ ZMIANY');
    END IF;
  
    SELECT ID_WYCIECZKI INTO idwycieczki FROM REZERWACJE WHERE NRREZERWACJI=NR_REZERWACJI;

  UPDATE REZERWACJE SET STATUS = NOWY_STATUS WHERE NR_REZERWACJI = NRREZERWACJI;
  INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (NRREZERWACJI,SYSDATE,NOWY_STATUS);

  IF NOWY_STATUS LIKE 'A' THEN
    UPDATE WYCIECZKI
    SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC + 1
    WHERE ID_WYCIECZKI = idwycieczki;
  END IF;

END;
/

create PROCEDURE DODAJ_REZERWACJE_3 (IDWYCIECZKI NUMBER, IDOSOBY NUMBER) AS
    data_wycieczki DATE;
    id_nowej_rezerwacji NUMBER;
BEGIN
  BEGIN
    CZY_OSOBA_ISTNIEJE(IDOSOBY);
    CZY_WYCIECZKA_ISTNIEJE(IDWYCIECZKI);
    LICZBA_WOLNYCH_MIEJSC(IDWYCIECZKI);
  END;

  SELECT DATA INTO data_wycieczki FROM WYCIECZKI
      WHERE IDWYCIECZKI=ID_WYCIECZKI;
  IF data_wycieczki < SYSDATE THEN
    raise_application_error (-20001,'WYCIECZKA NIE JEST DOSTÊPNA');
  end if;
  INSERT INTO REZERWACJE(ID_WYCIECZKI,ID_OSOBY,STATUS) VALUES (IDWYCIECZKI,IDOSOBY,'N')
  RETURNING NR_REZERWACJI INTO id_nowej_rezerwacji;

  --INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (id_nowej_rezerwacji,data_wycieczki,'N');
END;
/

create PROCEDURE ZMIEN_STATUS_REZERWACJI_3 (NRREZERWACJI NUMBER, NOWY_STATUS CHAR) AS
    stary_status CHAR;

BEGIN
  BEGIN
    CZY_REZERWACJA_ISTNIEJE(NRREZERWACJI);
  END;
    SELECT STATUS INTO stary_status FROM REZERWACJE WHERE NRREZERWACJI=NR_REZERWACJI;
    IF stary_status ='A' THEN
     raise_application_error (-20001,'REZERWACJA ZOSTALA ANULOWANA');
    ELSIF stary_status=NOWY_STATUS THEN
      raise_application_error (-20001,'STATUS REZERWACJI JEST TAKI SAM');
    ELSIF stary_status='Z' AND (NOWY_STATUS='N' OR NOWY_STATUS='P') THEN
      raise_application_error (-20001,'REZERWACJA JEST ZAP£ACONA I POTWIERDZONA, NIE MO¯NA WPROWADZIC TAKIEJ ZMIANY');
    END IF;

  UPDATE REZERWACJE SET STATUS = NOWY_STATUS WHERE NR_REZERWACJI = NRREZERWACJI;
  --INSERT INTO REZERWACJE_LOG(NR_REZERWACJI,DATA,STATUS) VALUES (NRREZERWACJI,SYSDATE,NOWY_STATUS);



END;
/

